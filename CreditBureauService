package com.example.creditbureau.service;

import com.example.creditbureau.entity.CreditCardBureau;
import com.example.creditbureau.repository.CreditCardBureauRepository;
import com.example.creditbureau.utils.ExcelGeneratorUtil;
import org.springframework.stereotype.Service;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.Random;

@Service
public class CreditBureauService {

    private final CreditCardBureauRepository repo;
    private final ExcelGeneratorUtil excelGenerator;

    public CreditBureauService(CreditCardBureauRepository repo, ExcelGeneratorUtil excelGenerator) {
        this.repo = repo;
        this.excelGenerator = excelGenerator;
    }

    public CreditCardBureau generateCustomerCreditData(String customerId) throws IOException {
        // File paths (e.g., saved inside /data/ folder)
        String paymentFile = "data/" + customerId + "_payment_history.xlsx";
        String utilisationFile = "data/" + customerId + "_limit_utilisation.xlsx";

        // Generate Excel files with 5 accounts and 50 rows each
        excelGenerator.generatePaymentHistoryExcel(paymentFile);
        excelGenerator.generateLimitUtilisationExcel(utilisationFile);

        // Create entry with @Builder
        CreditCardBureau record = CreditCardBureau.builder()
                .customerId(customerId)
                .creditScore(generateCreditScore())
                .paymentHistoryFilePath(paymentFile)
                .limitUtilisationFilePath(utilisationFile)
                .allottedCreditLimit(generateRandomLimit())
                .updatedOn(LocalDateTime.now())
                .build();

        return repo.save(record);
    }

    private int generateCreditScore() {
        return 650 + new Random().nextInt(150); // Between 650–800
    }

    private double generateRandomLimit() {
        return 100000 + new Random().nextDouble() * 100000; // 1L–2L
    }
}
